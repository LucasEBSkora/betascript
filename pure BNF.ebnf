(*the format says ebnf, but it is actually just bnf. I wanted to use a syntax highlighter and the only one i found was for ebnf*)

<program> ::= <declaration> <program>| <linebreak> <program> | <unterminated_optional_stmt> EOF | EOF

<unterminated_optional_stmt> ::= <unterminated_print_stmt> | <unterminated_return_stmt> | <unterminated_var_decl_stmt> | <expression>

<whitespace> ::= TAB <whitespace> | " " <whitespace> | ""

<linebreak> ::= LINEBREAK <linebreak> | LINEBREAK

<whitespace_or_linebreak> ::= <whitespace> <whitespace_or_linebreak> | <linebreak> <whitespace_or_linebreak> | "" 

<declaration> ::= <class_decl> | <rou_decl> | <var_decl_stmt> | <statement> 

<class_decl> ::= "class" <whitespace> <identifier> <{> <routines> <}> 
               | "class" <whitespace> <identifier> <whitespace> "<" <whitespace> <identifier> <{> <routines>  <}> 

<routines> ::= routine <routines> | <whitespace_or_linebreak> <routines> | ""

<rou_decl> ::= "routine" <routine>
<routine> ::= <identifier> <(> <parameters> <)> <whitespace_or_linebreak> <block>
            | <identifier> <(> <)> <whitespace_or_linebreak> <block>

<parameters> ::= <identifier> | <identifier> <whitespace> "," <whitespace_or_linebreak> <parameters>

<var_decl_stmt> ::= <unterminated_var_decl_stmt> <delimitator>

<unterminated_var_decl_stmt> ::= <let> <identifier>
          | <let> <identifier> <assigment_operator> <expression>
          | <let> <identifier> <(>  <)> <assigment_operator> <expression>
          | <let> <identifier> <(> <parameters> <)> <assigment_operator> <expression>
          
<let> ::= "let" <whitespace>

<assigment_operator> ::= <whitespace> "=" <whitespace_or_linebreak>

<statement> ::= <expr_stmt> | <for_stmt> | <if_stmt> | <print_stmt> | <return_stmt> | <while_stmt> | <block> | <directive>

<directive> ::= "#" directiveName 

<directive_name ::=  a directive name is composed of anything that isn't whitespace. There is probably a simple way of expressing this in regEx, 
but i unforgivably don't know how to use them. basically, if it can be a twitter hashtag, it counts

<expr_stmt> ::= <expression> <delimitator>

<for_stmt> ::= "for" <(> <for_stmt_init_clause> <whitespace> ";" <whitespace_or_linebreak> <for_stmt__clause> <whitespace> ";"
               <whitespace_or_linebreak> <for_stmt__clause>  <)> <whitespace_or_linebreak> <statement>

<for_stmt_init_clause> ::= <var_decl> | <expression> | ""
<for_stmt__clause> ::= <expression> | ""

<if_stmt> := <if_clause> | <if_clause> <whitespace_or_linebreak> <else_clause>

<if_clause> ::= "if" <(> <expression> <)> <whitespace_or_linebreak> <statement>

<else_clause> ::= "else" <whitespace_or_linebreak> <statement> 

<print_stmt> ::= <unterminated_print_stmt> <delimitator>

<unterminated_print_stmt> ::= "print" <whitespace> <expression>

<return_stmt> ::= "return" <whitespace> <expression> <whitespace> ";"
                | "return" <whitespace> ";"
                | "return" <whitespace> <expression> <whitespace> <linebreak>

<unterminated_return_stmt> ::= "return" | "return" <whitespace> <expression>

<while_stmt> ::= "while" <(> <expression> <)> <statement>

<block> ::= <{> <block_body> <}> | <{> <block_body> <unterminated_optional_stmt> <}> 
<block_body> ::= <whitespace_or_linebreak> <block_body> | <declaration> <block_body> | ""

<expression> ::= <assigment>

<assigment> ::= <logic_or> | <calls> <identifier> <assigment_operator> <assigment>

<calls> ::= <call> <whitespace> "." <whitespace_or_linebreak> <calls> | ""

<logic_or> ::= <logic_and> | <logic_and> <whitespace> <or> <whitespace_or_linebreak> <logic_or>
<logic_and> ::= <equality> | <equality> <whitespace> <and> <whitespace_or_linebreak> <logic_and>

<or> ::= "or" | "∨"
<and> ::= "and" | "∧"

<equality> ::= <comparison> | <comparison> <whitespace> <equality_operator> <whitespace_or_linebreak> <equality>
<equality_operator> ::= "==" | "===" | "≡" | "!="

<comparison> ::= <set_binary> | <set_binary> <whitespace> <comparison_operator> <whitespace_or_linebreak> <comparison>
<comparison_operator> ::= ">" | ">=" | "<" | "<="

<set_binary> ::= <addition> | <addition> <whitespace> <set_operator> <whitespace_or_linebreak> <set_binary>
<set_operator> ::= "union" | "intersection" | "\" | "contained" | "disjoined" | "belongs" | "⊂" | "∈" | "∪" | "∩"

<addition> ::= <multiplication> | <multiplication> <whitespace> <addition_operator> <whitespace_or_linebreak> <addition>
<addition_operator> ::= "-" | "+"

<multiplication> ::= <exponentiation> | <exponentiation> <whitespace> <multiplication_operator> <whitespace_or_linebreak> <multiplication>
<multiplication_operator> ::= "*" | "/"

<exponentiation> ::= <unary_left> | <unary_left> <whitespace> "^" <whitespace_or_linebreak> <exponentiation>

<unary_left> ::= <unary_right> | <unary_left_operator> <whitespace_or_linebreak> <unary_left>
<unary_left_operator> ::= "not" | "-" | "~" | "¬", 

<unary_right> ::= <call> | <derivative> | <unary_right> <whitespace> <unary_right_operator>
<unary_right_operator> ::= "!" | "'"


<call> ::= <primary> <whitespace> <routine_or_field>

<routine_or_field> ::= ""
                     | <(> <)> <routine_or_field>
                     | <(> <arguments> <)> <routine_or_field> |
                     | "." <whitespace_or_linebreak> <identifier> <routine_or_field>

<arguments> ::= <expression> | <expression> <whitespace> "," <whitespace_or_linebreak> <arguments>

<derivative> ::= <partial_differential> <whitespace> "/" <whitespace_or_linebreak> <derivative_parameters>
<partial_differential> ::=  <del> <(> <expression> <)>
<derivative_parameters> ::= <del> <(> <arguments> <)>

<del> ::= "del" | "∂"

<primary> ::= <set_definition> | NUMBER | STRING | "false" | "true" | "unknown" | "nil" 
            | <(> <expression> <)> | <explain_expr>
            | <identifier> | "super" <whitespace> "." <whitespace_or_linebreak> <identifier>

<explain_expr> ::= "explain" <whitespace> <expression>

<set_definition> ::= "set" <whitespace_or_linebreak> <set_def> | <whitespace_or_linebreak> <set_def>
<set_def> ::= <interval_definition> | <roster_set_definition> | <builder_set_definition>

<interval_definition> ::= <left_interval_edge> expression <whitespace> "," <whitespace_or_linebreak> expression <right_interval_edge>

<left_interval_edge> ::= <[> | <(>
<right_interval_edge> ::= <]> | <)>

<roster_set_definition> ::= <{> <}> | <{> <arguments> <}>

<builder_set_definition> ::= <{> "|" <whitespace_or_linebreak> <logic_or> <}>
                           | <{> <arguments> <whitespace> "|" <whitespace_or_linebreak> <logic_or> <}>

delimitator ::= <linebreak> | <;> 

<;> ::= <whitespace> ";" <whitespace_or_linebreak>

<(> ::= <whitespace> "(" <whitespace_or_linebreak>
<)> ::= <whitespace_or_linebreak> ")" <whitespace>

<[> ::= <whitespace> "[" <whitespace_or_linebreak>
<]> ::= <whitespace_or_linebreak> "]" <whitespace>

<{> ::= <whitespace> "{" <whitespace_or_linebreak>
<}> ::= <whitespace_or_linebreak> "}" <whitespace>

